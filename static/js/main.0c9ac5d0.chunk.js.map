{"version":3,"sources":["components/PersonName/PersonName.tsx","components/PersonRow/PersonRow.tsx","components/FilterButton.tsx","components/PeopleTable/PeopleTable.tsx","components/PeoplePage/PeoplePage.tsx","api.ts","App.tsx","index.tsx"],"names":["PersonName","name","slug","sex","search","useLocation","to","pathname","style","color","PersonRow","React","memo","person","sortBy","className","classNames","born","died","motherName","fatherName","FilterButton","text","sortParam","useState","isRevers","setIsRevers","useSearchParams","searchParams","setSearchParams","sortOrder","get","useEffect","type","onClick","curr","set","src","alt","PeopleTable","people","visiblePeople","useMemo","sort","a","b","localeCompare","map","PeoplePage","setPeople","slugMan","useParams","fetch","then","res","ok","Error","status","statusText","json","father","find","m","mother","f","appliedQuery","query","setQuery","applyQuery","useCallback","debounce","newQuery","delete","filteredPeople","lowerQuery","toLowerCase","filter","pers","includes","filterPeople","placeholder","value","onChange","event","target","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c9ac5d0.chunk.js","sourcesContent":["import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\ntype Props = {\n  name: string;\n  slug: string;\n  sex: string;\n};\n\nexport const PersonName: React.FC<Props> = ({ name, slug, sex }) => {\n  const { search } = useLocation();\n\n  return (\n    <Link\n      to={{\n        pathname: `/people/${slug}`,\n        search,\n      }}\n      style={{ color: sex === 'f' ? '#ee3966' : '#3099a7' }}\n    >\n      {name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { People } from '../../type';\n\nimport { PersonName } from '../PersonName/PersonName';\n\ntype Props = {\n  person: People;\n  sortBy: string | null;\n};\n\nexport const PersonRow: React.FC<Props> = React.memo(\n  ({ person, sortBy }) => (\n    <>\n      <td className={classNames({ 'is-selected': sortBy === 'name' })}>\n        <PersonName\n          name={person.name}\n          slug={person.slug}\n          sex={person.sex}\n        />\n      </td>\n      <td className={classNames({ 'is-selected': sortBy === 'sex' })}>\n        {person.sex === 'f' ? 'Female' : 'Male'}\n      </td>\n      <td className={classNames({ 'is-selected': sortBy === 'born' })}>\n        {person.born}\n      </td>\n      <td className={classNames({ 'is-selected': sortBy === 'died' })}>\n        {person.died}\n      </td>\n      <td style={{ color: '#ee3966' }}>\n        {person.motherName ? (\n          <PersonName\n            name={person.name}\n            slug={person.slug}\n            sex={person.sex}\n          />\n        ) : person.motherName}\n      </td>\n      <td style={{ color: '#3099a7' }}>\n        {person.fatherName ? (\n          <PersonName\n            name={person.name}\n            slug={person.slug}\n            sex={person.sex}\n          />\n        ) : person.fatherName}\n      </td>\n    </>\n  ),\n);\n","import React, { useEffect, useState } from 'react';\n\nimport { useSearchParams, useLocation } from 'react-router-dom';\n\ntype Props = {\n  text: string;\n  sortParam: string;\n};\n\nexport const FilterButton: React.FC<Props> = React.memo(\n  ({\n    text,\n    sortParam,\n  }) => {\n    const [isRevers, setIsRevers] = useState(false);\n    const { search } = useLocation();\n    const [searchParams, setSearchParams] = useSearchParams(search);\n\n    const sortOrder = searchParams.get('sortOrder');\n    const sortBy = searchParams.get('sortBy');\n\n    useEffect(() => {\n      if (sortBy !== sortParam) {\n        setIsRevers(false);\n      }\n    }, [sortBy]);\n\n    const src = () => {\n      if (sortBy === sortParam) {\n        return sortOrder === 'asc'\n          ? './images/sort_asc.png'\n          : './images/sort_desc.png';\n      }\n\n      return './images/sort_both.png';\n    };\n\n    return (\n      <>\n        <button\n          type=\"button\"\n          className=\"filter-button\"\n          onClick={() => {\n            setIsRevers(curr => !curr);\n            searchParams.set('sortBy', sortParam);\n            searchParams.set('sortOrder', isRevers ? 'desc' : 'asc');\n            setSearchParams(searchParams);\n          }}\n        >\n          {text}\n          <span className=\"icon\">\n            <img src={src()} alt=\"icon\" />\n          </span>\n        </button>\n      </>\n\n    );\n  },\n);\n","import React, { useMemo } from 'react';\nimport {\n  useSearchParams,\n  useLocation,\n} from 'react-router-dom';\nimport classNames from 'classnames';\nimport { People } from '../../type';\nimport { PersonRow } from '../PersonRow/PersonRow';\nimport { FilterButton } from '../FilterButton';\n\ntype Props = {\n  people: People[];\n  slug: string | undefined;\n};\n\nexport const PeopleTable: React.FC<Props> = React.memo(\n  ({ people, slug }) => {\n    const { search } = useLocation();\n    const [searchParams] = useSearchParams(search);\n\n    const sortBy = searchParams.get('sortBy');\n    const sortOrder = searchParams.get('sortOrder');\n\n    const visiblePeople = useMemo(() => {\n      if (sortBy) {\n        return people.sort((a, b) => {\n          switch (sortBy) {\n            case 'name':\n            case 'sex':\n              return sortOrder === 'asc'\n                ? a[sortBy].localeCompare(b[sortBy])\n                : b[sortBy].localeCompare(a[sortBy]);\n            case 'born':\n            case 'died':\n              return sortOrder === 'asc'\n                ? a[sortBy] - b[sortBy]\n                : b[sortBy] - a[sortBy];\n            default: return 0;\n          }\n        });\n      }\n\n      return people;\n    }, [sortBy, sortOrder, people]);\n\n    return (\n      <div className=\"wrapper\">\n        <div className=\"box\">\n          <table className=\"PeopleTable\n      table is-hoverable is-fullwidth\"\n          >\n            <thead>\n              <tr>\n                <th>\n                  <FilterButton\n                    text=\"Name\"\n                    sortParam=\"name\"\n                  />\n                </th>\n                <th>\n                  <FilterButton\n                    text=\"Sex\"\n                    sortParam=\"sex\"\n                  />\n                </th>\n                <th>\n                  <FilterButton\n                    text=\"Born\"\n                    sortParam=\"born\"\n                  />\n                </th>\n                <th>\n                  <FilterButton\n                    text=\"Died\"\n                    sortParam=\"died\"\n                  />\n                </th>\n                <th><p className=\"text-wrapper\">Mother</p></th>\n                <th><p className=\"text-wrapper\">Father</p></th>\n              </tr>\n            </thead>\n            <tbody>\n              {visiblePeople.map((person) => (\n                <tr\n                  key={person.slug}\n                  className={classNames(\n                    { 'is-selected': person.slug === slug },\n                  )}\n                >\n                  <PersonRow person={person} sortBy={sortBy} />\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n      </div>\n    );\n  },\n);\n","import React, {\n  useEffect, useState, useCallback, useMemo,\n} from 'react';\nimport {\n  useSearchParams, useParams,\n  useLocation,\n} from 'react-router-dom';\nimport { debounce } from 'lodash';\nimport { People } from '../../type';\nimport { getPeople } from '../../api';\nimport { PeopleTable } from '../PeopleTable/PeopleTable';\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<People[]>([]);\n\n  const { slugMan } = useParams();\n  const { search } = useLocation();\n\n  const [searchParams, setSearchParams] = useSearchParams(search);\n\n  useEffect(() => {\n    getPeople()\n      .then((res: People[]) => res.map(person => ({\n        ...person,\n        father: res.find(m => m.name === person.fatherName),\n        mother: res.find(f => f.name === person.motherName),\n      })))\n      .then(setPeople);\n  }, []);\n\n  const appliedQuery = searchParams.get('query') || '';\n  const [query, setQuery] = useState(appliedQuery);\n\n  const applyQuery = useCallback(\n    debounce((newQuery: string) => {\n      if (newQuery) {\n        searchParams.set('query', newQuery);\n      } else {\n        searchParams.delete('query');\n      }\n\n      setSearchParams(searchParams);\n    }, 500),\n    [people, searchParams, slugMan],\n  );\n\n  const filterPeople = () => {\n    if (appliedQuery) {\n      const lowerQuery = appliedQuery.toLowerCase();\n\n      return people.filter(pers => (\n        pers.name.toLowerCase().includes(lowerQuery)\n        || pers.motherName?.toLowerCase().includes(lowerQuery)\n        || pers.fatherName?.toLowerCase().includes(lowerQuery)\n      ));\n    }\n\n    return people;\n  };\n\n  const filteredPeople = useMemo(() => {\n    return filterPeople();\n  }, [people, appliedQuery]);\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    applyQuery(event.target.value);\n    setQuery(event.target.value);\n  };\n\n  return (\n    <div className=\"PeoplePage block\">\n      <h2 className=\"title HomePage__title\">\n        Peope page\n      </h2>\n      <div className=\"wrapper\">\n        <div className=\"level is-mobile\">\n          <div className=\"level-left\">\n            <div className=\"control\">\n              <input\n                type=\"text\"\n                className=\"input\"\n                placeholder=\"Write name here\"\n                value={query}\n                onChange={handleQueryChange}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <PeopleTable people={filteredPeople} slug={slugMan} />\n    </div>\n  );\n};\n","const URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeople = () => {\n  return fetch(URL)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n","import './App.scss';\nimport {\n  Route, Routes, Link, Navigate,\n} from 'react-router-dom';\nimport 'bulma';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <nav>\n        <Link to=\"/\">Home page </Link>\n        <Link to=\"/people\">People page</Link>\n      </nav>\n      <Routes>\n        <Route path=\"/\" element={<h1>Home page</h1>} />\n        <Route path=\"/people\" element={<PeoplePage />} />\n        <Route path=\"/people/:slugMan\" element={<PeoplePage />} />\n        <Route path=\"/home\" element={<Navigate to=\"/\" />} />\n        <Route\n          path=\"*\"\n          element={\n            <p>Page not found</p>\n          }\n        />\n      </Routes>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}